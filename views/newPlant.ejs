<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>New Plant Sightings</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <!-- Link to external CSS file -->
    <link href="/stylesheets/style.css" rel="stylesheet">
</head>
<body>
<%- include('navbar.ejs') %>
<div class="container shadow mt-4">
    <h1>New Plant Sightings</h1>
    <div class="row">
        <div class="col-md-6">
            <form id="plantForm" action="/savePlant" method="POST" enctype="multipart/form-data">
                <div class="mb-3">
                    <label for="userName" class="form-label"></label>
                    <input type="text" class="form-control" id="userName" name="userName" placeholder="Enter User Name" required >
                </div>
                <div class="mb-3">
                    <label for="plantName" class="form-label"><b>Plant Name</b></label>
                    <input type="text" class="form-control" id="plantName" name="plantName" placeholder="Enter Plant Name" required >
                </div>
                <div class="mb-3">
                    <label for="dateTime" class="form-label"><b>Date/Time</b></label>
                    <input type="datetime-local" class="form-control"  name="dateTime" id="dateTime" onchange="updateDate()" required>
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label"><b>Description</b></label>
                    <textarea class="form-control" id="description" name="description" rows="3" required></textarea>
                </div>
                <div class="mb-3">
                    <label for="location" class="form-label"><b>Location</b></label>
                    <input type="hidden" class="form-control" id="location" name="location" placeholder="Enter Location" required>
                </div>
                <div class="mb-3">
                    <input type="checkbox" name="currentLocationCheckbox" id="currentLocationCheckbox">
                    <label for="currentLocationCheckbox" >Are you on your current location?</label><br>
                </div>
                <div class="mb-3">
                    <label for="plantHeight" class="form-label"><b>Plant Height</b></label>
<!--                    <label for="plantHeight" class="form-label"><b>Plant Height</b></label>-->
                    <input type="text" class="form-control" id="plantHeight" name="plantHeight" placeholder="Enter Height in Meters" required ><br>

<!--                    <label for="plantWidth" class="form-label"><b>Plant Width</b></label>-->
                    <input type="text" class="form-control" id="plantWidth" name="plantWidth" placeholder="Enter width in Meters " required >

                    <!-- Hidden input to hold the concatenated value -->
                    <input type="hidden" id="plantSize" name="plantSize" required>
                </div>
                <div class="mb-3">
                    <label for="plantCharacteristic" class="form-label">Plant Characteristic</label>
                    <div class="mb-3">
                        <label class="form-check-label"><b>Select Plant Type:</b></label><br>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="plantType" id="withFlower" value="withFlower" checked>
                            <label class="form-check-label" for="withFlower">With Flower</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="plantType" id="withoutFlower" value="withoutFlower">
                            <label class="form-check-label" for="withoutFlower">Without Flower</label>
                        </div>
                    </div>
                    <div class="mb-3">
                            <label class="form-check-label"><b>Select Fruit Type:</b></label><br>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="fruitType" id="withFruitSeed" value="withFruitSeed" checked>
                            <label class="form-check-label" for="withFruitSeed">With Fruit / Seed</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="fruitType" id="withoutFruitSeed" value="withoutFruitSeed">
                            <label class="form-check-label" for="withoutFruitSeed">Without Fruit / Seed</label>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-check-label"><b>Select Leaves Type:</b></label><br>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="leavesType" id="withLeaves" value="withLeaves" checked>
                            <label class="form-check-label" for="withLeaves">With Leaves</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="leavesType" id="withoutLeaves" value="withoutLeaves">
                            <label class="form-check-label" for="withoutLeaves">Without Leaves</label>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-check-label"><b>Select Sun Exposure Type:</b></label><br>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="sunExposureType" id="fullSun" value="fullSun" checked>
                            <label class="form-check-label" for="fullSun">Full Sun</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="sunExposureType" id="partialShade" value="partialShade">
                            <label class="form-check-label" for="partialShade">Partial Shade</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="sunExposureType" id="fullShade" value="fullShade">
                            <label class="form-check-label" for="fullShade">Full Shade</label>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="plantColor" class="form-label"><b>Plant Color</b></label>
                        <input type="color" class="form-control" name="plantColor" id="plantColor">
                    </div>
                </div>
                <div class="mb-3">
                    <label for="imageUpload" class="form-label"><b>Upload Image</b></label>
                    <input type="file" class="form-control" id="imageUpload" name="imageUpload" onchange="previewImage(event)" required>
                </div>
                <button type="submit" class="btn btn-primary">Submit</button>
            </form>
        </div>
        <div class="col-md-6">

            <div class="col-md-6 shadow">
                <div id="map"></div>
            </div>

            <div class="card shadow" id="imagePreviewCard">
                <div class="card-header">
                    Preview Image
                </div>
                <div class="card-body">
                    <img id="imagePreview" src="#" alt="Image Preview" class="w-100">
                </div>
            </div>
        </div>

        <div class="modal fade" id="alertModal" tabindex="-1" aria-labelledby="alertModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="alertModalLabel">Success!</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body" id="alertsContainer"></div>
                </div>
            </div>
        </div>
        <div id="plantData"></div>
    </div>

</div>
<script>

    document.getElementById('plantForm').addEventListener('submit', function(event) {
        // Prevent the default form submission
        event.preventDefault();

        // Get the height and width values
        var height = document.getElementById('plantHeight').value;
        var width = document.getElementById('plantWidth').value;

        // Concatenate the height and width with a separator (e.g., x)
        var plantSize = height + ' x ' + width;

        // Set the concatenated value in the hidden input field
        document.getElementById('plantSize').value = plantSize;

        // Submit the form
        if (navigator.onLine){
            this.submit();
        }
        else{
            let plantdata = storePlantIndex();
            console.log("on offline base", plantdata)
            openSyncPlantIDB().then((db) => {
                addNewPlantToSync(db,plantdata).then(() => {
                    console.log("Plant added to IDB")
                })
            });
            // storePlantIndex()
            // alert("You are offline. Plant is saved and will be synced once online");
        }
    });

    window.addEventListener('online', () => {
        alert("You are online. New added plants have been synced.");
        // document.getElementById('chat_input').value = '';
        // Send any saved chat messages to mongoDB
        openSyncPlantIDB().then((db) => {
            getAllSyncPlants(db).then((plants) => {
                for (const plant of plants) {
                    const formData = new FormData();
                    // Append each field of the plant object to the FormData object
                    Object.keys(plant).forEach(key => {
                        formData.append(key, plant[key]);
                    });
                    // Append the image file
                    fetch('/savePlant', {
                        method: 'POST',
                        // headers: {
                        //     'Content-Type': 'multipart/form-data' //'application/json'
                        // },
                        body: formData
                        // enctype="multipart/form-data",
                        // body: JSON.stringify(plant) // Assuming 'plant' contains all necessary plant data
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Failed to save plant details');
                            }
                            // Optionally, handle success response
                            deleteSyncPlantFromIDB(db, plant.id);
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            // Handle error
                        });
                }
            });
        });
        console.log('Online');
    });

    const deleteSyncPlantFromIDB = (syncPlantIDB, id) => {
        const transaction = syncPlantIDB.transaction(["sync-plants"], "readwrite")
        const plantStore = transaction.objectStore("sync-plants");
        const deleteRequest = plantStore.delete(id);

        deleteRequest.addEventListener("success", () => {
            console.log("Deleted " + id)
        })
    }

    const getAllSyncPlants = (syncPlantIDB) => {
        return new Promise((resolve, reject) => {
            const transaction = syncPlantIDB.transaction(["sync-plants"]);
            const plantStore = transaction.objectStore("sync-plants");
            const getAllRequest = plantStore.getAll();

            getAllRequest.addEventListener("success", () => {
                resolve(getAllRequest.result);
            });

            getAllRequest.addEventListener("error", (event) => {
                reject(event.target.error);
            });
        });
    }

    window.addEventListener('offline', () => {
        alert("You are offline. Plant will be saved and will be synced once online");
        console.log('Offline');
    });

    function updateDate() {
        // Get the current date and time
        let now = new Date();
        // Format the current date and time
        let formattedNow = now.toISOString().slice(0,16);

        // Update the max attribute of the datetime-local input
        document.getElementById('dateTime').setAttribute('max', formattedNow);
    }

    window.onload = function() {
        updateDate();
    };


    // document.getElementById('plantForm').addEventListener('submit', function (event) {
    //     event.preventDefault();
    //     fetch('/savePlant', {
    //         method: 'POST',
    //         body: new FormData(this)
    //     })
    //         .then(response => response.json())
    //         .then(data => {
    //             if (data.success) {
    //                 let alertDiv = document.createElement('div');
    //                 alertDiv.className = 'alert alert-success';
    //                 alertDiv.setAttribute('role', 'alert');
    //                 alertDiv.textContent = 'Plant saved successfully!';
    //                 document.getElementById('alertsContainer').innerHTML = alertDiv.outerHTML;
    //                 let myModal = new bootstrap.Modal(document.getElementById('alertModal'));
    //                 myModal.show(); // Show the modal
    //                 setTimeout(function () {
    //                     window.location.href = '/main';
    //                 }, 3000);
    //             } else {
    //                 let alertDiv = document.createElement('div');
    //                 alertDiv.className = 'alert alert-danger';
    //                 alertDiv.setAttribute('role', 'alert');
    //                 alertDiv.textContent = 'Error saving plant';
    //                 document.getElementById('alertsContainer').innerHTML = alertDiv.outerHTML;
    //                 let myModal = new bootstrap.Modal(document.getElementById('alertModal'));
    //                 myModal.show(); // Show the modal
    //             }
    //         })
    //         .catch(error => {
    //             console.error('Error saving plant:', error);
    //             let alertDiv = document.createElement('div');
    //             alertDiv.className = 'alert alert-danger';
    //             alertDiv.setAttribute('role', 'alert');
    //             alertDiv.textContent = 'Error saving plant';
    //             document.getElementById('alertsContainer').innerHTML = alertDiv.outerHTML;
    //             let myModal = new bootstrap.Modal(document.getElementById('alertModal'));
    //             myModal.show(); // Show the modal
    //         });
    // });


    document.getElementById('plantColor').addEventListener('change', function() {
        var selectedColor = this.value;
        console.log("Selected Color:", selectedColor);
    });

        function previewImage(event) {
        var reader = new FileReader();
        reader.onload = function () {
            var output = document.getElementById('imagePreview');
            output.src = reader.result;
            // Show the card when image previewed
            document.getElementById('imagePreviewCard').classList.add('show');
            console.log("Image preview loaded");
        }
        reader.readAsDataURL(event.target.files[0]);
    }

    function initMap() {
        var map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 53.3811, lng: -1.4701 },
            zoom: 8
        });

        var marker = new google.maps.Marker({
            position: { lat: 53.3811, lng: -1.4701 },
            map: map,
            draggable: true // Allow the marker to be dragged initially
        });

        // Variable to store coordinates
        var coordinates = "";

        // Function to get the current location
        function getCurrentLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    coordinates = position.coords.latitude + ", " + position.coords.longitude;
                    console.log("Coordinates:", coordinates);
                    marker.setPosition({ lat: position.coords.latitude, lng: position.coords.longitude });
                    document.getElementById("location").value = coordinates;
                });
            } else {
                alert("Geolocation is not supported by this browser.");
            }
        }

        google.maps.event.addListener(marker, 'dragend', function (event) {
            coordinates = event.latLng.lat() + ", " + event.latLng.lng(); // Update the coordinates variable
            console.log("Coordinates:", coordinates); // Print the coordinates to the console
            document.getElementById("location").value = coordinates;
        });

        // Check if the checkbox is checked
        var currentLocationCheckbox = document.getElementById('currentLocationCheckbox');
        currentLocationCheckbox.addEventListener('change', function () {
            if (this.checked) {
                getCurrentLocation();
                // Disable marker dragging
                marker.setDraggable(false);
            } else {
                // Enable marker dragging
                marker.setDraggable(true);
            }
        });

        // Call getCurrentLocation initially
        getCurrentLocation();
    }
</script>

<script>

    function openSyncPlantIDB() {
        return new Promise((resolve, reject) => {
            const request = indexedDB.open("sync-plants", 1);

            request.onerror = function (event) {
                reject(new Error(`Database error: ${event.target}`));
            };

            request.onupgradeneeded = function (event) {
                const db = event.target.result;
                db.createObjectStore('sync-chats', {keyPath: 'id', autoIncrement: true});
            };

            request.onsuccess = function (event) {
                const db = event.target.result;
                resolve(db);
            };
        });
    }

    const addNewPlantToSync = (db, plantdata) => {
        if (Object.keys(plantdata).length != 0){
            const transaction = db.transaction(["sync-plants"], "readwrite");
            const plantStore = transaction.objectStore("sync-plants");
            const addRequest = plantStore.add(plantdata);

            addRequest.addEventListener("success", () => {
                console.log("Plant data saved to IndexedDB")
            })
        }
    }
    //
    // / Assume we have an image data in a variable named imageData
    // // imageData can be obtained from various sources like file input, canvas, or fetched from a server
    //
    // // Convert image data to Blob
    // const blob = new Blob([imageData], { type: 'image/jpeg' });
    //
    // // Open IndexedDB database
    // const request = indexedDB.open('myDatabase', 1);
    //
    // request.onerror = function(event) {
    //     console.error('IndexedDB error:', event.target.errorCode);
    // };
    //
    // request.onupgradeneeded = function(event) {
    //     const db = event.targe

    function storePlantIndex() {
        // Gather form data
        const formData = new FormData(plantForm);
        const plantData = {
            userName: formData.get("userName"),
            plantName: formData.get("plantName"),
            dateTime: formData.get("dateTime"),
            description: formData.get("description"),
            location: formData.get("location"),
            plantSize: formData.get("plantSize"),
            plantType: formData.get("plantType"),
            fruitType: formData.get("fruitType"),
            leavesType: formData.get("leavesType"),
            sunExposureType: formData.get("sunExposureType"),
            plantColor: formData.get("plantColor"),
            imageUpload: formData.get("imageUpload").name // Save the file name, handle file separately
        };
        // const imageFile = formData.get("imageUpload");
        // const reader = new FileReader();
        // reader.onload = function(event) {
        //     // Convert the loaded data to a Blob
        //     const imageBlob = new Blob([event.target.result], { type: imageFile.type });
        //     plantData.imageUpload()
        // }
        return plantData;
    }
</script>


<script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCuqPAkMS8XSE0XCU2iFpA-M_znQ-rmSFg&callback=initMap">
    </script>
    <!-- Bootstrap JS -->
<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>


</body>
</html>
