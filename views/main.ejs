<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Plant Sightings</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <script src="/javascripts/elapsedtime.js"></script>
    <!--    <link rel="stylesheet" type="text/css" href='/stylesheets/style.css'>-->
</head>
<body>
<%- include('navbar.ejs') %>
<div class="col-md-9 col-xl-10 px-md-4 py-5 mt-5">
    <section class="jumbotron text-left">
        <div class="container">
            <h1 class="jumbotron-heading">Plant Sightings</h1>
<!--            <p class="lead text-muted">Contains all plant sightings as described by users.</p>-->
        </div>
    </section>
    <label class="list-group form-check-reverse fw-semibold fst-italic">Sort By:</label>
    <div class="form-check form-check-reverse">
        <label class="form-check-label fw-lighter">
            <input class="form-check-input" type="radio" name="sortOrder" value="mostRecent" checked/> Most Recent
        </label>
    </div>
    <div class="form-check form-check-reverse">
        <label class="form-check-label fw-light">
            <input class="form-check-input" type="radio" name="sortOrder" value="other"/> Other Sorting Scheme
        </label>
    </div>
    <h5 class="jumbotron-heading" style="margin-left: 200px;">Filters: </h5>
    <div class="d-flex" style="margin-left: 200px; margin-top: 10px; ">
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownLeaves" data-bs-toggle="dropdown" aria-expanded="false">
                Leaves
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownLeaves">
                <li><a class="dropdown-item" href="#" id="hasLeaves">Has Leaves</a></li>
                <li><a class="dropdown-item" href="#" id="noLeaves">No Leaves</a></li>
            </ul>
        </div>

        <div class="dropdown ms-2">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownFruits" data-bs-toggle="dropdown" aria-expanded="false">
                Fruits
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownFruits">
                <li><a class="dropdown-item" href="#" id="hasFruits">Has Fruits</a></li>
                <li><a class="dropdown-item" href="#" id="noFruits">No Fruits</a></li>
            </ul>
        </div>
        <div class="dropdown ms-2">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownFlowers" data-bs-toggle="dropdown" aria-expanded="false">
                Flowers
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownFlowers">
                <li><a class="dropdown-item" href="#" id="hasFlowers">Has Flowers</a></li>
                <li><a class="dropdown-item" href="#" id="noFlowers">No Flowers</a></li>
            </ul>
        </div>
        <div class="dropdown ms-2">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownSunExposure" data-bs-toggle="dropdown" aria-expanded="false">
                Sun Exposure
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownSunExposure">
                <li><a class="dropdown-item" href="#" id="fullSun">Full Sun</a></li>
                <li><a class="dropdown-item" href="#" id="partialShade">Partial Shade</a></li>
                <li><a class="dropdown-item" href="#" id="fullShade">Full Shade</a></li>
            </ul>
        </div>
        <!--        <button id="resetButton" class="btn btn-primary btn-sm">Reset Filters</button>-->
        <div class="ms-auto">
            <button id="resetButton" class="btn btn-primary btn-sm">Reset Filters</button>
        </div>
    </div>
</div>
<div class="album py-5 bg-light"><!--    style="background-color:#70A300">-->
    <div class="container">
        <div class="row" id="plantCards">
            <% data.forEach(plant => { %>
                <div class="col-md-4">
                    <div class="card mb-4 box-shadow" >
                        <% if (plant.img) { %>
                            <img class="card-img-top" src="<%= plant.img %>" alt="Card image cap" style="width: 100%; height: 300px; object-fit: cover;">
                        <% } %>
                        <div class="card-body">
                            <p class="card-text"><%= plant.description %></p>
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="btn-group">
                                    <form action="/plantdetails" method="POST">
                                        <!-- Hidden input field to store plant ID -->
                                        <input type="hidden" name="plantId" value="<%= plant._id %>"/>
                                        <button type="submit" class="btn btn-sm btn-outline-secondary">View</button>
                                    </form>
                                </div>
                                <% if (plant.dos) { %>
                                    <small class="text-muted"><%= getTimeElapsed(plant.dos) %></small>
                                <% } %>
                            </div>
                        </div>
                    </div>
                </div>
            <% }); %>

        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
<script>

    var plantData = <%- JSON.stringify(data) %>;
    // Function to sort data by most recent
    function sortByMostRecent() {
        plantData.sort((a, b) => new Date(b.dos) - new Date(a.dos));
        renderData(plantData);
    }

    // Function to generate tags based on plant data
    function generateTags(plant) {
        let tags = '';
        if (plant.leaves) {
            tags += '<span class="tag badge bg-success" style="margin-right: 5px;">Leaves</span>';
        } else {
            tags += '<span class="tag badge bg-danger" style="margin-right: 5px;">No Leaves</span>';
        }
        if (plant.fruits_or_seeds) {
            tags += '<span class="tag badge bg-success" style="margin-right: 5px;">Fruits</span>';
        } else {
            tags += '<span class="tag badge bg-danger" style="margin-right: 5px;">No Fruits</span>';
        }
        if (plant.flowers) {
            tags += '<span class="tag badge bg-success" style="margin-right: 5px;">Flowers</span>';
        } else {
            tags += '<span class="tag badge bg-danger" style="margin-right: 5px;">No Flowers</span>';
        }
        // Add tags for sun exposure
        if (plant.sun_exposure === 'fullSun') {
            tags += '<span class="tag badge bg-warning" style="margin-right: 5px;">Full Sun</span>';
        } else if (plant.sun_exposure === 'partialShade') {
            tags += '<span class="tag badge bg-warning" style="margin-right: 5px;">Partial Shade</span>';
        } else if (plant.sun_exposure === 'fullShade') {
            tags += '<span class="tag badge bg-warning" style="margin-right: 5px;">Full Shade</span>';
        }
        return tags;
    }

    // Function to render data
    function renderData(data) {
        // Clear existing HTML
        // Render data
        // This part depends on how you're rendering the data
        var plantCards = document.getElementById('plantCards');
        plantCards.innerHTML = ''; // Clear existing cards

        data.forEach(plant => {
            var cardHtml = `
                <div class="col-md-4">
                    <div class="card mb-4 box-shadow">
                        ${plant.img ? `<img class="card-img-top" src="${plant.img}" alt="Card image cap" style="width: 100%; height: 300px; object-fit: cover;">` : ''}
                        <div class="card-body">
                            <p class="card-text">${plant.description}</p>
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="btn-group">
                                    <form action="/plantdetails" method="POST">
                                        <input type="hidden" name="plantId" value="${plant._id}">
                                        <button type="submit" class="btn btn-sm btn-outline-secondary">View</button>
                                    </form>
                                </div>
                                ${plant.dos ? `<small class="text-muted">${getTimeElapsed(plant.dos)}</small>` : ''}
                            </div>
<!--                        <br/>-->
                        <div style="margin-top: 15px;">Tags: ${generateTags(plant)}</div>
                        </div>
                    </div>
                </div>
            `;
            plantCards.innerHTML += cardHtml;
        });
    }

    // Define an array to hold active filters
    let activeFilters = [];

    function filterData() {
        let filteredData = plantData;
        filteredData = filteredData.filter(plant => {
            // Filter based on leaves
            if (activeFilters.includes('hasLeaves') && !plant.leaves) {
                return false;
            }
            if (activeFilters.includes('noLeaves') && plant.leaves) {
                return false;
            }
            // Filter based on fruits
            if (activeFilters.includes('hasFruits') && !plant.fruits_or_seeds) {
                return false;
            }
            if (activeFilters.includes('noFruits') && plant.fruits_or_seeds) {
                return false;
            }
            // Filter based on flowers
            if (activeFilters.includes('hasFlowers') && !plant.flowers) {
                return false;
            }
            if (activeFilters.includes('noFlowers') && plant.flowers) {
                return false;
            }
            // Filter based on sun exposure
            if (activeFilters.includes('fullSun') && plant.sun_exposure !== 'fullSun') {
                return false;
            }
            if (activeFilters.includes('partialShade') && plant.sun_exposure !== 'partialShade') {
                return false;
            }
            if (activeFilters.includes('fullShade') && plant.sun_exposure !== 'fullShade') {
                return false;
            }
            // Check for plants that have both leaves and fruits
            if (activeFilters.includes('hasLeaves') && activeFilters.includes('hasFruits')) {
                return plant.leaves && plant.fruits_or_seeds;
            }
            // Check for plants that have no leaves and no fruits
            if (activeFilters.includes('noLeaves') && activeFilters.includes('noFruits')) {
                return !plant.leaves && !plant.fruits_or_seeds;
            }
            // Check for mix and match of other filters
            return true;
        });
        renderData(filteredData);
        if (filteredData.length === 0) {
            var plantCards = document.getElementById('plantCards');
            var cardHtml = `
        <h4 class="jumbotron-heading">No plants due to filters, please reset the filters to see plants again</h4>
        `;
            plantCards.innerHTML += cardHtml;
        }
    }

    function toggleFilter(filter) {
        const index = activeFilters.indexOf(filter);
        if (index === -1) {
            activeFilters.push(filter);
            if (filter === 'hasLeaves' && activeFilters.includes('noLeaves')) {
                activeFilters.splice(activeFilters.indexOf('noLeaves'), 1);
            }
            if (filter === 'noLeaves' && activeFilters.includes('hasLeaves')) {
                activeFilters.splice(activeFilters.indexOf('hasLeaves'), 1);
            }
            if (filter === 'hasFruits' && activeFilters.includes('noFruits')) {
                activeFilters.splice(activeFilters.indexOf('noFruits'), 1);
            }
            if (filter === 'noFruits' && activeFilters.includes('hasFruits')) {
                activeFilters.splice(activeFilters.indexOf('hasFruits'), 1);
            }
            if (filter === 'hasFlowers' && activeFilters.includes('noFlowers')) {
                activeFilters.splice(activeFilters.indexOf('noFlowers'), 1);
            }
            if (filter === 'noFlowers' && activeFilters.includes('hasFlowers')) {
                activeFilters.splice(activeFilters.indexOf('hasFlowers'), 1);
            }
            // Add conditions for sun exposure filter
            if (filter === 'fullSun' && activeFilters.includes('partialShade')) {
                activeFilters.splice(activeFilters.indexOf('partialShade'), 1);
            }
            if (filter === 'fullSun' && activeFilters.includes('fullShade')) {
                activeFilters.splice(activeFilters.indexOf('fullShade'), 1);
            }
            if (filter === 'partialShade' && activeFilters.includes('fullSun')) {
                activeFilters.splice(activeFilters.indexOf('fullSun'), 1);
            }
            if (filter === 'partialShade' && activeFilters.includes('fullShade')) {
                activeFilters.splice(activeFilters.indexOf('fullShade'), 1);
            }
            if (filter === 'fullShade' && activeFilters.includes('fullSun')) {
                activeFilters.splice(activeFilters.indexOf('fullSun'), 1);
            }
            if (filter === 'fullShade' && activeFilters.includes('partialShade')) {
                activeFilters.splice(activeFilters.indexOf('partialShade'), 1);
            }
        } else {
            activeFilters.splice(index, 1);
        }
        filterData();
    }

    // function filterData() {
    //     let filteredData = plantData;
    //     // Filter data based on active filters
    //     filteredData = filteredData.filter(plant => {
    //         if (activeFilters.includes('hasLeaves') && !plant.leaves) {
    //             return false; // If 'hasLeaves' filter is active but the plant has no leaves, exclude it
    //         }
    //         if (activeFilters.includes('noLeaves') && plant.leaves) {
    //             return false; // If 'noLeaves' filter is active but the plant has leaves, exclude it
    //         }
    //         if (activeFilters.includes('hasFruits') && !plant.fruits_or_seeds) {
    //             return false; // If 'hasFruits' filter is active but the plant has no fruits, exclude it
    //         }
    //         if (activeFilters.includes('noFruits') && plant.fruits_or_seeds) {
    //             return false; // If 'noFruits' filter is active but the plant has fruits, exclude it
    //         }
    //
    //         // Check for plants that have both leaves and fruits
    //         if (activeFilters.includes('hasLeaves') && activeFilters.includes('hasFruits')) {
    //             return plant.leaves && plant.fruits_or_seeds;
    //         }
    //
    //         // Check for plants that have no leaves and no fruits
    //         if (activeFilters.includes('noLeaves') && activeFilters.includes('noFruits')) {
    //             return !plant.leaves && !plant.fruits_or_seeds;
    //         }
    //
    //         // Check for mix and match of other filters
    //         return true;
    //     });
    //     console.log(filteredData.length)
    //     renderData(filteredData);
    //     if (filteredData.length === 0) {
    //         var plantCards = document.getElementById('plantCards');
    //         var cardHtml = `
    //         <h4 class="jumbotron-heading">No plants due to filters, please reset the filters to see plants again</h4>
    //         `;
    //         plantCards.innerHTML += cardHtml;
    //     }
    // }

    // Function to toggle active filters
    // function toggleFilter(filter) {
    //     const index = activeFilters.indexOf(filter);
    //     if (index === -1) {
    //         activeFilters.push(filter);
    //         if (filter === 'hasLeaves' && activeFilters.includes('noLeaves')) {
    //             activeFilters.splice(activeFilters.indexOf('noLeaves'), 1);
    //         }
    //         if (filter === 'noLeaves' && activeFilters.includes('hasLeaves')) {
    //             activeFilters.splice(activeFilters.indexOf('hasLeaves'), 1);
    //         }
    //         if (filter === 'hasFruits' && activeFilters.includes('noFruits')) {
    //             activeFilters.splice(activeFilters.indexOf('noFruits'), 1);
    //         }
    //         if (filter === 'noFruits' && activeFilters.includes('hasFruits')) {
    //             activeFilters.splice(activeFilters.indexOf('hasFruits'), 1);
    //         }
    //     } else {
    //         activeFilters.splice(index, 1);
    //     }
    //     console.log(activeFilters)
    //     filterData();
    // }

    // Add event listener for reset button
    document.getElementById('resetButton').addEventListener('click', function() {
        // Clear active filters
        activeFilters = [];
        // Call filterData function to display all plants
        filterData();
    });

    // Set event listener for dropdown button clicks
    document.querySelectorAll('.dropdown-toggle').forEach(function(button) {
        button.addEventListener('click', function () {
            // Toggle the dropdown menu
            // console.log("Clicked the button - function")
            let dropdownMenu = this.nextElementSibling;
            dropdownMenu.classList.toggle('show');
        });
    });

    // Set event listener for dropdown item clicks
    document.querySelectorAll('.dropdown-item').forEach(function(item) {
        // item.addEventListener('click', filterData.bind(item));
        item.addEventListener('click', function(event) {
            event.preventDefault(); // Prevent default link behavior
            toggleFilter(this.id); // Toggle the filter based on clicked item
            // Hide the dropdown menu after a selection is made
            this.closest('.dropdown').querySelector('.dropdown-toggle').click();
            // filterData.call(this); // Call filterData with 'this' referring to the clicked item
        });
    });

    // Set event listener for radio button change
    document.querySelectorAll('input[type="radio"][name="sortOrder"]').forEach(function(radio) {
        radio.addEventListener('change', function () {
            if (this.value === 'mostRecent') {
                sortByMostRecent();
            } else {
                // Add other sorting schemes here
                console.log("Hello sorting 2")
            }
        });
    });
    sortByMostRecent();
</script>
</body>
</html>