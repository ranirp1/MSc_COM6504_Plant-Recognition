<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Plant Sightings</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <script src="/javascripts/elapsedtime.js"></script>
    <!--    <link rel="stylesheet" type="text/css" href='/stylesheets/style.css'>-->
</head>
<body>
<%- include('navbar.ejs') %>
<div class="col-md-9 col-xl-10 px-md-4 py-5 mt-5">
    <section class="jumbotron text-left">
        <div class="container">
            <h1 class="jumbotron-heading">Plant Sightings</h1>
<!--            <p class="lead text-muted">Contains all plant sightings as described by users.</p>-->
        </div>
    </section>
    <label class="list-group form-check-reverse fw-semibold fst-italic">Sort By:</label>
    <div class="form-check form-check-reverse">
        <label class="form-check-label fw-lighter">
            <input class="form-check-input" type="radio" name="sortOrder" value="mostRecent" checked/> Most Recent
        </label>
    </div>
    <div class="form-check form-check-reverse">
        <label class="form-check-label fw-light">
            <input class="form-check-input" type="radio" name="sortOrder" value="other"/> Other Sorting Scheme
        </label>
    </div>

    <div class="d-flex">
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownLeaves" data-bs-toggle="dropdown" aria-expanded="false">
                Leaves
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownLeaves">
                <li><a class="dropdown-item" href="#" id="hasLeaves">Has Leaves</a></li>
                <li><a class="dropdown-item" href="#" id="noLeaves">No Leaves</a></li>
            </ul>
        </div>

        <div class="dropdown ms-2">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownFruits" data-bs-toggle="dropdown" aria-expanded="false">
                Fruits
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownFruits">
                <li><a class="dropdown-item" href="#" id="hasFruits">Has Fruits</a></li>
                <li><a class="dropdown-item" href="#" id="noFruits">No Fruits</a></li>
            </ul>
        </div>
    </div>
</div>
<div class="album py-5 bg-light"><!--    style="background-color:#70A300">-->
    <div class="container">
        <div class="row" id="plantCards">
            <% data.forEach(plant => { %>
                <div class="col-md-4">
                    <div class="card mb-4 box-shadow" >
                        <% if (plant.img) { %>
                            <img class="card-img-top" src="<%= plant.img %>" alt="Card image cap" style="width: 100%; height: 300px; object-fit: cover;">
                        <% } %>
                        <div class="card-body">
                            <p class="card-text"><%= plant.description %></p>
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="btn-group">
                                    <form action="/plantdetails" method="POST">
                                        <!-- Hidden input field to store plant ID -->
                                        <input type="hidden" name="plantId" value="<%= plant._id %>"/>
                                        <button type="submit" class="btn btn-sm btn-outline-secondary">View</button>
                                    </form>
                                </div>
                                <% if (plant.dos) { %>
                                    <small class="text-muted"><%= getTimeElapsed(plant.dos) %></small>
                                <% } %>
                            </div>
                        </div>
                    </div>
                </div>
            <% }); %>

        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
<script>

    var plantData = <%- JSON.stringify(data) %>;
    // Function to sort data by most recent
    function sortByMostRecent() {
        plantData.sort((a, b) => new Date(b.dos) - new Date(a.dos));
        renderData(plantData);
    }

    // Function to render data
    function renderData(data) {
        // Clear existing HTML
        // Render data
        // This part depends on how you're rendering the data
        var plantCards = document.getElementById('plantCards');
        plantCards.innerHTML = ''; // Clear existing cards

        data.forEach(plant => {
            var cardHtml = `
                <div class="col-md-4">
                    <div class="card mb-4 box-shadow">
                        ${plant.img ? `<img class="card-img-top" src="${plant.img}" alt="Card image cap" style="width: 100%; height: 300px; object-fit: cover;">` : ''}
                        <div class="card-body">
                            <p class="card-text">${plant.description}</p>
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="btn-group">
                                    <form action="/plantdetails" method="POST">
                                        <input type="hidden" name="plantId" value="${plant._id}">
                                        <button type="submit" class="btn btn-sm btn-outline-secondary">View</button>
                                    </form>
                                </div>
                                ${plant.dos ? `<small class="text-muted">${getTimeElapsed(plant.dos)}</small>` : ''}
                            </div>
                        </div>
                    </div>
                </div>
            `;
            plantCards.innerHTML += cardHtml;
        });
    }

    // Define an array to hold active filters
    let activeFilters = [];

    function filterData() {
        let filteredData = plantData;
        if (activeFilters.includes('hasLeaves') && activeFilters.includes('noLeaves')) {
            // Remove both filters if both are selected
            activeFilters = activeFilters.filter(filter => filter !== 'hasLeaves' && filter !== 'noLeaves');
        }
        if (activeFilters.includes('hasFruits') && activeFilters.includes('noFruits')) {
            // Remove both filters if both are selected
            activeFilters = activeFilters.filter(filter => filter !== 'hasFruits' && filter !== 'noFruits');
        }
        filteredData = filteredData.filter(plant => {
            // Filter data based on active filters
            if (activeFilters.includes('hasLeaves')) {
                return plant.leaves;
            }
            if (activeFilters.includes('noLeaves')) {
                return !plant.leaves;
            }
            if (activeFilters.includes('hasFruits')) {
                return plant.fruits_or_seeds;
            }
            if (activeFilters.includes('noFruits')) {
                return !plant.fruits_or_seeds;
            }
            return true; // Show all if no filter is selected
        });
        renderData(filteredData);
    }

    // Function to toggle active filters
    function toggleFilter(filter) {
        const index = activeFilters.indexOf(filter);
        if (index === -1) {
            activeFilters.push(filter);
            if (filter === 'hasLeaves' && activeFilters.includes('noLeaves')) {
                activeFilters.splice(activeFilters.indexOf('noLeaves'), 1);
            }
            if (filter === 'noLeaves' && activeFilters.includes('hasLeaves')) {
                activeFilters.splice(activeFilters.indexOf('hasLeaves'), 1);
            }
            if (filter === 'hasFruits' && activeFilters.includes('noFruits')) {
                activeFilters.splice(activeFilters.indexOf('noFruits'), 1);
            }
            if (filter === 'noFruits' && activeFilters.includes('hasFruits')) {
                activeFilters.splice(activeFilters.indexOf('hasFruits'), 1);
            }
        } else {
            activeFilters.splice(index, 1);
        }
        console.log(activeFilters)
        filterData();
    }

    // // Function to filter data based on dropdown selection
    // function filterData() {
    //     console.log("Filter data function called")
    //     let filteredData = plantData;
    //     if (this.id === 'hasLeaves') {
    //         filteredData = filteredData.filter(plant => plant.leaves);
    //     } else if (this.id === 'noLeaves') {
    //         filteredData = filteredData.filter(plant => !plant.leaves);
    //     } else if (this.id === 'hasFruits') {
    //         filteredData = filteredData.filter(plant => plant.fruits_or_seeds);
    //     } else if (this.id === 'noFruits') {
    //         filteredData = filteredData.filter(plant => !plant.fruits_or_seeds);
    //     }
    //     renderData(filteredData);
    //     this.closest('.dropdown').querySelector('.dropdown-toggle').click();
    // }

    // function filterData() {
    //     let filteredData = plantData;
    //     if (activeFilters.includes('hasLeaves')) {
    //         filteredData = filteredData.filter(plant => plant.leaves);
    //     }
    //     if (activeFilters.includes('noLeaves')) {
    //         filteredData = filteredData.filter(plant => !plant.leaves);
    //     }
    //     if (activeFilters.includes('hasFruits')) {
    //         filteredData = filteredData.filter(plant => plant.fruits_or_seeds);
    //     }
    //     if (activeFilters.includes('noFruits')) {
    //         filteredData = filteredData.filter(plant => !plant.fruits_or_seeds);
    //     }
    //     renderData(filteredData);
    //     // this.closest('.dropdown').querySelector('.dropdown-toggle').click();
    // }

    // function toggleFilter(filter) {
    //     const index = activeFilters.indexOf(filter);
    //     if (index === -1) {
    //         activeFilters.push(filter);
    //     } else {
    //         activeFilters.splice(index, 1);
    //     }
    //     console.log(activeFilters)
    //     filterData();
    // }

    // Set event listener for dropdown button clicks
    document.querySelectorAll('.dropdown-toggle').forEach(function(button) {
        button.addEventListener('click', function () {
            // Toggle the dropdown menu
            console.log("Clicked the button - function")
            let dropdownMenu = this.nextElementSibling;
            dropdownMenu.classList.toggle('show');
        });
    });

    // Set event listener for dropdown item clicks
    document.querySelectorAll('.dropdown-item').forEach(function(item) {
        // item.addEventListener('click', filterData.bind(item));
        item.addEventListener('click', function(event) {
            event.preventDefault(); // Prevent default link behavior
            toggleFilter(this.id); // Toggle the filter based on clicked item
            // Hide the dropdown menu after a selection is made
            this.closest('.dropdown').querySelector('.dropdown-toggle').click();
            // filterData.call(this); // Call filterData with 'this' referring to the clicked item
        });
    });

    // Set event listener for radio button change
    document.querySelectorAll('input[type="radio"][name="sortOrder"]').forEach(function(radio) {
        radio.addEventListener('change', function () {
            if (this.value === 'mostRecent') {
                sortByMostRecent();
            } else {
                // Add other sorting schemes here
                console.log("Hello sorting 2")
            }
        });
    });
    sortByMostRecent();
</script>
</body>
</html>